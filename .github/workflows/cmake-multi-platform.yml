
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    tags:
      - v** #触发条件是当有以V开条的标签被创建时

  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
          fetch-depth: 0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target package

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Generate SHA256 Hash
      run: |
        #cd build
        sha256sum ${{ steps.strings.outputs.build-output-dir }}/qqWryDemo.zip > ${{ steps.strings.outputs.build-output-dir }}/qqWryDemo.zip.sha256

    - name: Get Build Time
      id: time
      run: echo "BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV
      
    - name: Get latest tag
      id: get-last-tag
      if: matrix.os == 'ubuntu-latest' 
      run: |
        # 获取最新标签（如 v1.0.0）
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
        echo "current_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
    - name: Print version
      if: matrix.os == 'ubuntu-latest' 
      run: |
        echo "version:${{ steps.get-last-tag.outputs.current_tag }}" 
      
    # - name: Increment version
    #   id: bump-version
    #   run: |
    #     # 解析当前版本号并递增补丁版本（v1.0.0 → v1.0.1）
    #     CURRENT_VERSION=$(echo "${{ steps.get-last-tag.outputs.current_tag }}" | cut -d'v' -f2)
    #     MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
    #     MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
    #     PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
    #     NEW_PATCH=$((PATCH + 1))
    #     echo "new_tag=v$MAJOR.$MINOR.$NEW_PATCH" >> $GITHUB_OUTPUT
        
    # - name: Delete existing remote tag (if needed)
    #   run: |
    #     git push --delete origin ${{ steps.get-last-tag.outputs.current_tag }} || true  # 忽略删除失败
        
    # - name: Create and push new tag
    #   run: |
    #     git tag ${{ steps.get-last-tag.outputs.current_tag }}
    #     git push origin ${{ steps.get-last-tag.outputs.current_tag }}
          
    - name: Create Release
      id: create_release
      if: matrix.os == 'ubuntu-latest' 
      uses: actions/create-release@v1 # 使用 actions/create-release action 创建 release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Token 来创建 release
      with:
        
        tag_name: ${{ matrix.c_compiler }}-${{ steps.get-last-tag.outputs.current_tag }} # 使用当前推送的 tag 作为 release 的 tag 名
        release_name: ${{ matrix.build_type }}
        draft: false # 是否为草稿版发布，false 表示发布后可以直接查看，true 表示需要手动发布
        prerelease: false # 是否为预发布版，false 表示正式版，true 表示预发布版

#    - name: Calculate file hash value
#      id: calculate_hash_value
#      run: |
#        echo "FILE_HASH=$(sha256sum ${{ steps.strings.outputs.build-output-dir }}/qqWryDemo.zip | awk '{ print $1 }')" >> $GITHUB_ENV   
           

    - name: Deploy to GitHub Pages
      id: publish-build
      if: matrix.os == 'ubuntu-latest' 
      uses: actions/upload-release-asset@v1.0.2   # 使用 actions/create-release action 创建 release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/qqWryDemo.zip
        asset_name: qqWryDemo-release.zip
        asset_content_type: application/zip




    - name: Deploy to SHA256 Value
      id: publish-build-MD5
      if: matrix.os == 'ubuntu-latest' 
      uses: actions/upload-release-asset@v1.0.2   # 使用 actions/create-release action 创建 release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/qqWryDemo.zip.sha256
        asset_name: qqWryDemo.zip.sha256
        asset_content_type: text/html       